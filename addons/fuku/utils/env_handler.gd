extends RefCounted
class_name EnvHandler

var env_file_path: String = "res://addons/fuku/.env"

# Load environment variables from .env file
func load_env_file() -> Dictionary:
	var env_vars: Dictionary = {}
	var file = FileAccess.open(env_file_path, FileAccess.READ)

	if file == null:
		print("No .env file found at: " + env_file_path)
		return env_vars

	while not file.eof_reached():
		var line = file.get_line().strip_edges()
		if line.is_empty() or line.begins_with("#"):
			continue

		var parts = line.split("=", false, 1)
		if parts.size() == 2:
			var key = parts[0].strip_edges()
			var value = parts[1].strip_edges()

			if value.begins_with("\"") and value.ends_with("\""):
				value = value.substr(1, value.length() - 2)

			env_vars[key] = value

	file.close()
	return env_vars

# Save environment variables to .env file
func save_env_file(env_vars: Dictionary) -> bool:
	var file = FileAccess.open(env_file_path, FileAccess.WRITE)
	if file == null:
		push_error("Failed to save .env file")
		return false

	file.store_line("# API Keys (base64 encoded for security)")
	file.store_line("# Generated by Fuku Chat Plugin")
	file.store_line("")

	for key in env_vars.keys():
		file.store_line("%s=\"%s\"" % [key, env_vars[key]])

	file.close()
	return true

# Encode string to base64
func encode_base64(text: String) -> String:
	return Marshalls.utf8_to_base64(text)

# Decode base64 to string
func decode_base64(encoded: String) -> String:
	var result = Marshalls.base64_to_utf8(encoded)
	if result.is_empty() and not encoded.is_empty():
		print("Warning: Failed to decode base64 string")
		return ""
	return result
